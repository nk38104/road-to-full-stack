------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------- ARROW FUNCTIONS ----------------------------------------------------------

    - It is a compact alternative to a traditional function expression, but it's limited and can't be used in all situations.

    - Differences & Limitations:

        - does not have its own bindings to this or super, and should not be used as methods.
        - does not have new.target keyword.
        - not suitable for call, apply and bind methods, which generally rely on establishing a scope.
        - can not be used as constructors.
        - can not use yield, within its body.

    e.g.
        // Traditional Anonymous Function
        function (a){
        return a + 100;
        }

        // Arrow Function Break Down

        // 1. Remove the word "function" and place arrow between the argument and opening body bracket
        (a) => {
        return a + 100;
        }

        // 2. Remove the body braces and word "return" -- the return is implied.
        (a) => a + 100;

        // 3. Remove the argument parentheses
        a => a + 100;

    - So if we have one parameter we don't need a parentheses but if we have multiple params that requires parentheses. Also
      multiline statements require body braces and return
        e.g.

           (param1, paramN) > {
                let a = 1;
                return a + param1 + paramN;
            }

    - Good resources:
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions
        - https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/
        - https://oprearocks.medium.com/es6-arrow-functions-in-depth-f241d49ede33
        - https://www.digitalocean.com/community/tutorials/understanding-arrow-functions-in-javascript

------------------------------------------------------------------------------------------------------------------------------------------