-----------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------- ARRAYS 2 ----------------------------------------------------------

    ---------
    -- MAP --
    ---------

    - THe map() method creates a new array that is populated with the result of calling a provided function on evey element that 
      is in the calling array.
    
    - The function has to return something.

    - We are able to use anything for the keys, there is no limitation to primitive values like symbols, numbers, strings but here 
      we can even use functions, objects, dates,... Keys won’t be casted to strings like with regular objects, either.

    e.g.
        const array = [ 1, 2, 5, 10 ];

        const mapArray = array.map(num => num * 2);

        console.log(mapArray); // output: [ 2, 4, 10, 20 }

    Good resources:
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
        - https://www.javascripttutorial.net/es6/javascript-map/
        - https://ponyfoo.com/articles/es6-maps-in-depth
        - https://javascript.plainenglish.io/understanding-javascript-map-function-in-depth-6c8c987fcd6e

    ------------
    -- FILTER --
    ------------

    - The filter() method creates a new array with all elements that pass the test implemented by the provided function.

    - It does not mutate the array on which it is called, but it can be done.

    e.g.
        const array = [ 'spray', 'limit', 'elite', 'exuberant', 'destruction', 'present' ];

        const filteredArray = array.filter(word => word.length > 6);

        console.log(filteredArray); // output: ["exuberant", "destruction", "present"]

    Good resources:
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
        - https://www.javascripttutorial.net/javascript-array-filter/
        - https://medium.com/@p0zart/javascript-with-dragons-filter-method-in-depth-420a4e45346a

    ------------
    -- REDUCE --
    ------------

    - The reduce() method executes a user-supplied “reducer” callback function on each element of the array, in order, passing 
      in the return value from the calculation on the preceding element. The final result of running the reducer across  all 
      elements of the array is a single value.

    - The first time that the callback is run there is no "return value of the previous calculation". If supplied, an initial 
      value may be used in its place. Otherwise array element 0 is used as the initial value and iteration starts from the next 
      element (index 1 instead of index 0).

    - accumulator - abstract name, it is something where we can store information that happens in the body of the function
    e.g.
        const array = [ 1, 2, 5, 10 ];

        const reduceArray = array.reduce((accumulator, num) => {
            return accumulator + num;
        }, 0); // default accumulator value

        console.log(reduceArray); // output: 18 ==> 0 + 1 = 1 + 2 = 3 + 5 = 8 + 10 = 18

        const array1 = [1, 2, 3, 4];
        const reducer = (previousValue, currentValue) => previousValue + currentValue;

        // 1 + 2 + 3 + 4
        console.log(array1.reduce(reducer));
        // expected output: 10

        // 5 + 1 + 2 + 3 + 4
        console.log(array1.reduce(reducer, 5));
        // expected output: 15

    Good resources:
        - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
        - https://www.digitalocean.com/community/tutorials/js-finally-understand-reduce
        - https://www.freecodecamp.org/news/reduce-f47a7da511a9/
        - https://codeburst.io/learn-understand-javascripts-reduce-function-b2b0406efbdc
    
    -------------------------------
    -- CHAIN MAP, FILTER, REDUCE --
    -------------------------------

    - https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4

-----------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------- OBJECTS 2 ----------------------------------------------------------

    -----------------------------------
    --  PRIMITIVE AND REFERENCE TYPE --
    -----------------------------------

    - In JavaScript, a variable may store two types of values: primitive and reference.
    
    - Javascript has 6 data types that are passed by value: Boolean, null, undefined, String, Number and Symbol and these are 
      called primitive types. If a primitive type is assigned to a variable, we can think of that variable as containing the 
      primitive value.

    - Variables that are assigned a non-primitive value are given a reference to that value. That reference points to the object’s 
      location in memory. The variables don’t actually contain the value.
      
    - Javascript has 3 data types that are passed by reference: Array, Function, and Object. These are all technically 
      Objects, so we’ll refer to them collectively as Objects.

    - The size of a primitive value is fixed, therefore, JavaScript stores the primitive value on the stack, while on the other
      hand the size of a reference value is dynamic so JavaScript stores the reference value on the heap.

    e.g.
        let a = 5;
        let b = a;

        b = 4;

        console.log(a, b) --> outputs 5, 4;

        On the other hand e.g.

        const obj = { a : 'a' };
        const obj2 = obj;

        obj2.a = "b";

        console.log(obj.a, obj2.a); --> outputs b, b

    Good reasources:
        - https://www.javascripttutorial.net/javascript-primitive-vs-reference-values/
        - https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0

    -------------
    -- CONTEXT --
    -------------

    - Sometimes the words “scope” and “context” are used interchangeably, which only leads to confusion because they are not the 
      same thing. Scope pertains to the visibility of variables, and context refers to the object to which a function belongs.
    
    - In JavaScript, “context” refers to an object. Within an object, the keyword “this” refers to that object (i.e. “self”), and 
      provides an interface to the properties and methods that are members of that object. When a function is executed, the 
      keyword “this” refers to the object that the function is executed in.

      e.g.
        - When a function executes in the global context, “this” refers to the global, or “window” object.
        - When a function is a method of an Object, “this” refers to that object (unless it is manually executed in the context of a different object).
        - When a function executes inside of another function (no matter how deeply nested), “this” refers to the object whose context within which it is executed.
        - When you instantiate a constructor function, inside of the instance object, “this” refers to the instance object.

    Good resources:
        - https://blog.kevinchisholm.com/javascript/context-object-literals/
        - https://medium.com/swlh/understanding-context-in-js-eceb5ef1fa75
        - https://www.debuggr.io/js-this-in-depth/
        - https://blog.kevinchisholm.com/javascript/difference-between-scope-and-context/
        - https://blog.pragmatists.com/the-many-faces-of-this-in-javascript-5f8be40df52e
        - https://www.javascripttutorial.net/javascript-execution-context/

    -------------------
    -- INSTANTIATION --
    -------------------

    - An instantiation pattern in JavaScript is a way to create an object using functions. 
      There are five instantiation patterns: Functional, Functional-shared, Prototypical, Pseudoclassical, and ES6.

    Read further on:
        - https://medium.com/@taylorshephard1/instantiation-patterns-in-javascript-7f9463b95839
        - https://medium.com/dailyjs/instantiation-patterns-in-javascript-8fdcf69e8f9b
        - https://dev.to/mconner89/a-quick-guide-to-instantiation-in-javascript-6n


-----------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------- PASS BY VALUE VS PASS BY REFERENCE ---------------------------------------------

    - https://www.geeksforgeeks.org/pass-by-value-and-pass-by-reference-in-javascript/

-----------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------ TYPE COERCION --------------------------------------------------------

    - Type coercion is the automatic or implicit conversion of values from one data type to another (such as strings to numbers).

    - JavaScript has two characterized forms of coercion: implicit coercion and explicit coercion.

        - Implicit coercion happens when JavaScript coerces the value type to the expected type under the hood.
          This type of coercion happens without the developer noticing.

        - Explicit coercion happens when we want to coerce the value type to a specific type. Most of the time, explicit coercion
          in JavaScript happens using built-in functions such as String(), Number(), and Boolean().

    - Try to avoid it in your code.

    Good resources:
        - https://blog.logrocket.com/type-coercion-in-javascript/
        - https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/
        - https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion

-----------------------------------------------------------------------------------------------------------------------------------
